<?php

/**
 * @file
 * Provides an panel to view, edit and migrate variables of a site
 *
 */

/**
 * Implementation of hook_menu
 */
function site_variables_menu() {

  $items = array();

  $base_menu_path = _site_variables_get_base_menu_path();
  $base_menu_title = _site_variables_get_base_menu_title();

  $items[$base_menu_path] = array(
    'title' => $base_menu_title,
    'page callback' => 'site_variables_page',
    'page arguments' => '',
    'access arguments' => array('administer site variables'),
  );

  $items = array_merge($items, site_variables_get_menu_items());

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function site_variables_perm() {
  $perms = array();
  $perms[] = 'administer site variables';

  $variables = module_invoke_all('site_variables');
  $variables = site_variables_prepare_variables($variables);

  foreach ($variables as $i => $variable) {
    $perms[] = _site_variables_permission_name($variable["group_path"]);
  }

  $perms = array_unique($perms);
  return $perms;
}

/**
 * Menu callback. Generates de settings page to edit the variables.
 */
function site_variables_page($group = '') {
  $output = '';
  $output .= drupal_get_form("site_variables_settings_form", $group);
  return $output;
}

function site_variables_settings_form($form_state, $group) {

  $form = array();

  $variables = module_invoke_all('site_variables');
  $variables = site_variables_prepare_variables($variables);

  foreach ($variables as $variable_name => $variable) {

    if (($variable["group"] == $group) || empty($group)) {

      if (user_access(_site_variables_permission_name($variable["group_path"]))) {

        //add a fieldset per group
        if (empty($form["fieldset_" . $variable["group_path"]])) {
          $form["fieldset_" . $variable["group_path"]] = array(
            '#type' => 'fieldset',
            '#title' => t($variable["group"]),
            '#collapsible' => TRUE,
            '#collapsed' => FALSE,
          );
        }

        //add variables to form
        $form["fieldset_" . $variable["group_path"]][$variable_name] = array();

        foreach ($variable as $key => $value) {
          //not create fields for these special properties of the array
          if (!in_array($key, array("group", "group_path"))) {
            $form["fieldset_" . $variable["group_path"]][$variable_name][$key] = $value;
          }
        }

        $form["fieldset_" . $variable["group_path"]][$variable_name]['#default_value'] = variable_get($variable_name, $value);
      }
    }
  }

  $form = system_settings_form($form);

  //we don't want this reset button
  unset($form['buttons']['reset']);

  return $form;
}

/**
 * Returns menu items to be used as tabs
 */
function site_variables_get_menu_items() {

  $variables = module_invoke_all('site_variables');
  $variables = site_variables_prepare_variables($variables);

  //menu items
  $items = array();
  $base_menu_path = _site_variables_get_base_menu_path();

  foreach ($variables as $variable) {

    $items[$base_menu_path . '/' . $variable["group_path"]] = array(
      'title' => $variable["group"],
      'page callback' => 'site_variables_page',
      'page arguments' => array($variable["group"]),
      'access arguments' => array(_site_variables_permission_name($variable["group_path"])),
    );
  }

  return $items;
}

/**
 * Prepares variables adding required properties
 */
function site_variables_prepare_variables($variables) {
  if (!empty($variables)) {
    foreach ($variables as $i => $variable) {

      if (empty($variable["group"])) {
        $variables[$i]["group"] = 'General';
      }

      if (empty($variable["group_path"])) {
        $variables[$i]["group_path"] = _site_variables_friendly_url($variables[$i]["group"]);
      }

      if (empty($variable["#title"])) {
        $variables[$i]["#title"] = $i;
      }

      if (empty($variable["#type"])) {
        $variables[$i]["#type"] = 'textfield';
      }
    }
  }

  return $variables;
}

function _site_variables_get_base_menu_path() {
  $path = variable_get('site_variables_base_menu_path', 'admin/settings/site-variables');
  return $path;
}

function _site_variables_get_base_menu_title() {
  $path = variable_get('site_variables_base_menu_title', 'Site variables');
  return $path;
}

function _site_variables_permission_name($group) {
  return 'edit ' . $group . ' site variables';
}

/**
 * Returns a url-friendly string.
 */
function _site_variables_friendly_url($string) {
  if (mb_detect_encoding($string) == "UTF-8") {
    $string = utf8_encode($string);
  }
  $string = htmlentities($string, ENT_COMPAT, "UTF-8", FALSE);
  $string = preg_replace('/&([a-z]{1,2})(?:acute|lig|grave|ring|tilde|uml|cedil|caron);/i', '\1', $string);
  $string = html_entity_decode($string, ENT_COMPAT, "UTF-8");
  $string = preg_replace('/[^a-z0-9-]+/i', '-', $string);
  $string = preg_replace('/-+/', '-', $string);
  $string = trim($string, '-');
  $string = strtolower($string);
  return $string;
}

/**
 * Implementation of hook_site_variables
 */
function site_variables_site_variables() {

  $variables = array();

  $variables['site_variables_base_menu_path'] = array(
    '#title' => t('Site variables menu base path'),
    '#description' => t('Base path for the sites variable module. By default is "admin/settings/site-variables".'),
    '#type' => 'textfield',
    'group' => 'Site variables module',
  );

  $variables['site_variables_base_menu_title'] = array(
    '#title' => t('Site variables menu title'),
    '#description' => t('Title used as root of the Sites variables menu'),
    '#type' => 'textfield',
    'group' => 'Site variables module',
  );

  return $variables;
}

